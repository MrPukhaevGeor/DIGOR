@@ -4,60 +4,30 @@
 import '../../domain/models/word_model.dart';
 import 'search_mode.dart';
 
+const _dir = <LanguageMode, (String from, String to)>{
+  LanguageMode.digEnglish: ('dig', 'en'),
+  LanguageMode.digRussian: ('dig', 'ru'),
+  LanguageMode.digTurkish: ('dig', 'turk'),
+  LanguageMode.engDigor: ('en', 'dig'),
+  LanguageMode.rusDigor: ('ru', 'dig'),
+  LanguageMode.turkDigor: ('turk', 'dig'),
+  LanguageMode.engIron: ('en', 'iron'),
+  LanguageMode.rusIron: ('ru', 'iron'),
+  LanguageMode.ironTurkish: ('iron', 'turk'),
+  LanguageMode.ironEnglish: ('iron', 'en'),
+  LanguageMode.ironRussian: ('iron', 'ru'),
+  LanguageMode.turkIron: ('turk', 'iron'),
+};
+
 final searchProvider = FutureProvider.family<List<WordModel>, String>((ref, text) async {
-  if (text.trim().isEmpty) {
-    return [];
-  }
+  if (text.trim().isEmpty) return [];
+
   final mode = ref.watch(searchModeProvider).value;
   if (mode == null) return [];
-  String fromLang = '';
-  String toLang = '';
-  switch (mode) {
-    case LanguageMode.digEnglish:
-      fromLang = 'dig';
-      toLang = 'en';
-
-    case LanguageMode.digRussian:
-      fromLang = 'dig';
-      toLang = 'ru';
-
-    case LanguageMode.digTurkish:
-      fromLang = 'dig';
-      toLang = 'turk';
-
-    case LanguageMode.engDigor:
-      fromLang = 'en';
-      toLang = 'dig';
-
-    case LanguageMode.rusDigor:
-      fromLang = 'ru';
-      toLang = 'dig';
-
-    case LanguageMode.turkDigor:
-      fromLang = 'turk';
-      toLang = 'dig';
-    case LanguageMode.engIron:
-      fromLang = 'en';
-      toLang = 'iron';
-    case LanguageMode.rusIron:
-      fromLang = 'ru';
-      toLang = 'iron';
-    case LanguageMode.ironTurkish:
-      fromLang = 'iron';
-      toLang = 'turk';
-    case LanguageMode.ironEnglish:
-      fromLang = 'iron';
-      toLang = 'en';
-    case LanguageMode.ironRussian:
-      fromLang = 'iron';
-      toLang = 'ru';
-    case LanguageMode.turkIron:
-      fromLang = 'turk';
-      toLang = 'iron';
-  }
 
+  final (fromLang, toLang) = _dir[mode]!;
   final api = ref.watch(localApiClientProvider);
-  final result = await api.search(text, fromLang, toLang);
 
+  final result = await api.search(text, fromLang, toLang);
   return result;
 });
